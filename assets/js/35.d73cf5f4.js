(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{310:function(e,v,t){"use strict";t.r(v);var a=t(14),_=Object(a.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"vue-钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-钩子"}},[e._v("#")]),e._v(" Vue 钩子")]),e._v(" "),v("h2",{attrs:{id:"一、vue生命周期钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、vue生命周期钩子"}},[e._v("#")]),e._v(" 一、Vue生命周期钩子")]),e._v(" "),v("h3",{attrs:{id:"生命周期定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期定义"}},[e._v("#")]),e._v(" 生命周期定义")]),e._v(" "),v("p",[e._v("每个 Vue 实例在被创建时都要经过一系列的初始化过程。\n例如：从开始创建、初始化数据、编译模板、挂载Dom、数据变化时更新DOM、卸载等一系列过程。\n我们称 "),v("strong",[e._v("这一系列的过程")]),e._v(" 就是Vue的生命周期。\n通俗说就是Vue实例从创建到销毁的过程，就是生命周期。\n同时在这个过程中也会运行一些叫做"),v("strong",[e._v("生命周期钩子")]),e._v("的函数，这给了用户在不同阶段添加自己的代码的机会，利用各个钩子来完成我们的业务代码。")]),e._v(" "),v("h3",{attrs:{id:"生命周期函数分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期函数分类"}},[e._v("#")]),e._v(" 生命周期函数分类")]),e._v(" "),v("p",[v("code",[e._v("beforeCreate")]),e._v("、"),v("code",[e._v("created")]),e._v("、"),v("code",[e._v("beforeMount")]),e._v("、"),v("code",[e._v("mounted")]),e._v("、"),v("code",[e._v("beforeUpdate")]),e._v("、"),v("code",[e._v("updated")]),e._v("、"),v("code",[e._v("beforeDestroy")]),e._v("、"),v("code",[e._v("destroyed")]),e._v("。")]),e._v(" "),v("ul",[v("li",[e._v("创建期间的生命周期函数：\n"),v("ul",[v("li",[e._v("beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性")]),e._v(" "),v("li",[e._v("created：实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板(模板 比如"),v("code",[e._v("{{}}")]),e._v(")")]),e._v(" "),v("li",[e._v("beforeMount：此时已经完成了模板的编译，但是还没有挂载到页面中")]),e._v(" "),v("li",[e._v("mounted：此时，已经将编译好的模板，挂载到了页面指定的容器中显示")])])]),e._v(" "),v("li",[e._v("运行期间的生命周期函数：\n"),v("ul",[v("li",[e._v("beforeUpdate：状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点")]),e._v(" "),v("li",[e._v("updated：实例更新完毕之后调用此函数，此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！")])])]),e._v(" "),v("li",[e._v("销毁期间的生命周期函数：\n"),v("ul",[v("li",[e._v("beforeDestroy：实例销毁之前调用。在这一步，实例仍然完全可用。")]),e._v(" "),v("li",[e._v("destroyed：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。")])])])]),e._v(" "),v("h2",{attrs:{id:"二、keep-alive的生命周期钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、keep-alive的生命周期钩子"}},[e._v("#")]),e._v(" 二、keep-alive的生命周期钩子")]),e._v(" "),v("ul",[v("li",[e._v("初次进入时：created > mounted > activated；退出后触发 deactivated")]),e._v(" "),v("li",[e._v("再次进入：会触发 activated；事件挂载的方法等，只执行一次的放在 mounted 中；组件每次进去执行的方法放在 activated 中")])]),e._v(" "),v("h2",{attrs:{id:"三、自定义指令钩子"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、自定义指令钩子"}},[e._v("#")]),e._v(" 三、自定义指令钩子")]),e._v(" "),v("h3",{attrs:{id:"自定义指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[e._v("#")]),e._v(" 自定义指令")]),e._v(" "),v("p",[e._v("常见的指令如 v-text v-model都是vue封装好的语法糖\n我们也可以封装自己的指令(用于对dom执行某些操作)\n封装自己的指令是通过directives来执行的\n指令的主要作用就是可以快捷的获取某个元素从而执行某种操作")]),e._v(" "),v("h3",{attrs:{id:"常用指令钩子函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用指令钩子函数"}},[e._v("#")]),e._v(" 常用指令钩子函数")]),e._v(" "),v("ul",[v("li",[e._v("bind：\n只调用一次，指令第一次绑定到元素时调用(这个时候还没插入dom)。在这里可以进行一次性的初始化设置。(不可以执行input的focus 因为指令绑定到元素 但元素还没插入到dom)\nbind：进行样式修改之类的操作")]),e._v(" "),v("li",[e._v("inserted：\n当指令绑定的元素插入到dom时执行的钩子函数\ninserted：进行JS中的有关操作")])]),e._v(" "),v("h3",{attrs:{id:"常用指令钩子参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用指令钩子参数"}},[e._v("#")]),e._v(" 常用指令钩子参数")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("el\n指代的是绑定自定义指令的那个元素")])]),e._v(" "),v("li",[v("p",[e._v("binding")]),e._v(" "),v("p",[e._v("当前自定义指令对象")]),e._v(" "),v("ul",[v("li",[e._v("name\n指令名，不包括 v- 前缀")]),e._v(" "),v("li",[e._v("value\n指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2")]),e._v(" "),v("li",[e._v("expression\n字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。")])])])]),e._v(" "),v("h3",{attrs:{id:"常用指令钩子函数-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用指令钩子函数-2"}},[e._v("#")]),e._v(" 常用指令钩子函数")]),e._v(" "),v("p",[e._v("指令定义函数提供了几个钩子函数：\n​ 1.bind 只调用一次，指令第一次绑定到元素时调用 在这里可以进行一次性的初始化设置 （一般进行样式之类的操作）")]),e._v(" "),v("p",[e._v("2.inserted 被绑定元素插入父节点时调用 (一般进行js相关的操作)")]),e._v(" "),v("p",[e._v("3.update 所在组件的Vnode更新时调用，但是可能发生在其子元素的Vnode更新之前")]),e._v(" "),v("p",[e._v("4.componentUpdate 所在组件的Vnode及其子元素的Vnode全部更新时调用")]),e._v(" "),v("p",[e._v("5.unbind 只调用一次，指令与元素解绑时")])])}),[],!1,null,null,null);v.default=_.exports}}]);